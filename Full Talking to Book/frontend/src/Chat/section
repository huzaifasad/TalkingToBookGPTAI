  <div className="h-screen w-screen bg-[#181a1d] flex relative">
<div className={`lg:w-[20%] bg-[#1d262d] h-screen text-yellow-50 `}>
      
        <div className="text-center h-[10%] border-b border-[#737474] w-full">
          <img
            src={`${myImage}`}
            alt=""
            className="w-[80%] h-full object-cover object-center mx-auto "
          />
        </div>

        <div className=" z-50 mb-5 h-[5%] pt-4">
          {/* <button className="w-full h-[50px] border  rounded-lg  bg-[#000000]">
            
          </button> start*/}

          {users ? (
            <>
              <div className="px-3">
                <button
                  onClick={handleOpenX}
                  variant="gradient"
                  className="mt-1 border-[#737474] w-full border rounded-md py-2 text-start px-3 text-xm font-hairline"
                >
                  + New Book
                </button>
              </div>
              <Dialog
                size="xs"
                open={openX}
                handler={handleOpenX}
                className="bg-transparent shadow-none"
              >
                <Card className="mx-auto w-full max-w-[24rem] bg-[#2b282899] text-white">
                  <CardBody className="flex flex-col gap-4">
                    <Typography variant="h4" color="blue-white">
                      Add Your Favoirite Book
                    </Typography>
                    <Typography
                      className="mb-3 font-normal"
                      variant="paragraph"
                      color="gray"
                    >
                      Enter Book Details
                    </Typography>
                    <Typography className="-mb-2" variant="h6">
                      Book Name
                    </Typography>
                    <Input
                      label="Book Name"
                      size="lg"
                      onChange={(e) => setbname(e.target.value)}
                    />
                    <Typography className="-mb-2" variant="h6">
                      Author Name
                    </Typography>
                    <Input
                      label="Name of Author"
                      size="lg"
                      onChange={(e) => setaname(e.target.value)}
                    />
                    <Typography className="-mb-2" variant="h6">
                      Link of Cover Photo
                    </Typography>
                    <Input
                      label="Cover of Book"
                      size="lg"
                      onChange={(e) => setbimgurl(e.target.value)}
                    />
                  </CardBody>
                  <CardFooter className="pt-0">
                    <Button
                      variant="gradient"
                      onClick={() => {
                        handleOpenX();
                        addBookData();
                      }}
                      fullWidth
                    >
                      Add Book
                    </Button>
                  </CardFooter>
                </Card>
              </Dialog>
            </>
          ) : (
            <>
              <div className="px-3">
                <button
                  onClick={handleOpen}
                  variant="gradient"
                  className="mt-1 border-[#737474] w-full border rounded-md py-2 text-start px-3 text-xm font-hairline"
                >
                  + New Book
                </button>
              </div>
              <Dialog
                open={open}
                handler={handleOpen}
                className=" bg-[#1d262d] text-white text-center h-56 border border-solid border-[#737474] "
                type
                size="sm"
              >
                <DialogHeader className="text-white flex items-center justify-center mb-10 mt-5 relative">
                  Sign in with Google
                </DialogHeader>
                {/* <DialogBody>
        Sign in with Google

        </DialogBody> */}
                <DialogFooter>
                  <Button
                    onClick={googleSignIn}
                    size="sm"
                    color="blue-gray"
                    className="flex items-center mx-auto  bg-white text-black gap-3 border-none"
                  >
                    <img
                      src="https://docs.material-tailwind.com/icons/google.svg"
                      alt="metamask"
                      className="h-6 w-6 mr-3"
                    />
                    Continue with Google
                  </Button>
                </DialogFooter>
              </Dialog>
            </>
          )}

          {/* new for the book adding  */}

          {/* openbookmenu */}

          {/* end */}
        </div>
        <div className="h-[70%]   py-5 text-center px-2 overflow-scroll hide-scroll-bar shadow-lg ">
          {users ? (
            <>
              {product.map((item, index) => (
                <>
                  <div key={index}>
                    <button
                      className="flex items-center justify-between py-3 w-full text-left pl-4 pr-2 hover:bg-[#0c191f] h-14 mb-2"
                      // onClick={() => handlebookdata(item.Author,item.Genre,item.Published,item.title)}
                    >
                      <div className="flex items-center">
                        <img
                          src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbc5iREKtgv7S00EnrIUbsQs_9jq7uVkVPzA&usqp=CAU"
                          alt=""
                          className="p-1"
                          style={{
                            height: "100%",
                            width: "40px",
                            objectFit: "cover",
                            objectPosition: "left",
                          }}
                        />
                        <span
                          className="ml-4"
                          onClick={() =>
                            handlebookdata(item.title, item.author)
                          }
                        >
                          {item.title}
                        </span>
                      </div>
                      <button
                        className="ml-4 text-2xl text-white"
                        onClick={() => deletebooks(item.title)}
                      >
                        <MdDelete />
                      </button>
                    </button>

                    {/* {users && (
  <div
    className="border fixed w-64 ml-1 mr-1  h-32 bg-green-600 px-3 py-4"
    style={{
      zIndex: 10000,
      bottom: "80px",
      left: "3px",
      transform: "",
    }}
  >
    {uplan === "free" && (
      <>
        <h2>{promptCount}/30 Question </h2>
        <Progress value={(promptCount / 30) * 100} className=" text-white" />
        <Link
          to={`/pricing`}
          className="block bg-white text-green-600 rounded-md border p-2 mt-4"
        >
          Upgrade
        </Link>
      </>
    )}
    {uplan === "plus" && (
      <>
        <h2>{promptCount}/{uplanqallow} Questions </h2>
        <Progress value={(promptCount / uplanqallow) * 100} className=" text-white" />
        <Link
          to={`/pricing`}
          className="block bg-white text-green-600 rounded-md border p-2 mt-4"
        >
          Upgrade
        </Link>
      </>
    )}
    {uplan === "genius" || uplan === "premium" && (
      <>
        <h2>You have unlimited questions</h2>
      </>
    )}
  </div>
)} */}
                    <div
                      className=" fixed w-72 ml-3 mr-1 bg-green-600  mb-7 rounded-xl"
                      style={{
                        zIndex: 100,
                        bottom: "80px",
                        left: "3px",
                        transform: "",
                      }}
                    >
                      {users && uplan ? (
                        <>
                          {uplan === "free" ? (
                            <>
                              <h2>{promptCount}/30 Question </h2>
                              <Progress
                                value={(promptCount / 30) * 100}
                                className="text-white"
                              />
                              <h1 className="block bg-white text-green-600 rounded-md border p-2 mt-4">
                                You Have Free Plan
                              </h1>
                            </>
                          ) : uplan === "plus" ? (
                            <>
                              <h2>
                                {countquestion}/{uplanqallow} Questions{" "}
                              </h2>
                              <Progress
                                value={(countquestion / uplanqallow) * 100}
                                className="text-white"
                              />
                              <h1 className="block bg-white text-green-600 rounded-md border p-2 mt-4">
                                You Have Plus Plan
                              </h1>
                            </>
                          ) : (
                            <p className="bg-[#45494b] border px-4 py-3 rounded-lg border-none">
                              You have unlimited questions
                            </p>
                          )}
                        </>
                      ) : (
                        <p className="bg-blue-500 hover:bg-blue-700 text-white w-full rounded h-10">
                         <Link to='/pricing'><h1>Upgrade</h1></Link> 
                        </p>
                      )}
                    </div>
                  </div>
                </>
              ))}
            </>
          ) : (
            <>
              {bookdata.map((item, index) => (
                <>
                  <div key={index}>
                    <button
                      className="flex items-center py-3 w-full text-left pl-10 hover:bg-[#0c191f] h-14 mb-2"
                      onClick={() => handlebookdata(item.title, item.author)}
                    >
                      <div className="flex items-center">
                        <img
                          src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbc5iREKtgv7S00EnrIUbsQs_9jq7uVkVPzA&usqp=CAU"
                          alt=""
                          className="p-1"
                          style={{
                            height: "100%",
                            width: "40px",
                            objectFit: "cover",
                            objectPosition: "left",
                          }}
                        />
                        <span className="ml-2">{item.title}</span>
                      </div>
                    </button>
                  </div>
                </>
              ))}
            </>
          )}

          <button></button>
        </div>
        <div className="  h-[6%] border-t-2 border-[#737474]  text-center">
          {renderAuthButton()}
        </div>
      </div>
      <div className="lg:w-[80%] w-[100%] bg-[#2a3742] text-white">
        <div className="h-[10%] border-b border-[#737474] ">
          {/* <div className="w-60 bg-[#161c20] absolute top-3 right-6">
            <Select
              label="Select Language"
              className="text-[#737474] border-none focus:outline-none"
              value={selectedLanguage}
              onChange={handleLanguageChange}
            >
              <Option
                className="bg-[your-dropdown-background-color] text-[your-dropdown-text-color]"
                value="French"
              >
                French
              </Option>
              <Option
                className="bg-[your-dropdown-background-color] text-[your-dropdown-text-color]"
                value="English"
              >
                English
              </Option>
            </Select>
          </div> */}
           <div className=" inline-block text-left ">
   
        {users ? (
  uplan ? (
    // If users and uplan exist, show nothing
    <></>
  ) : (
    // If users exist but no uplan, show the menu
    <Menu>
<MenuHandler>
  <Button className="flex w-72 justify-center items-center  ml-3 mt-3 h-12 bg-[#2a3742]">
    {" "}
  
   <h1>ChatGPT 3.5</h1><IoMdArrowDropdown  className="text-2xl ml-5"/>

  </Button>
</MenuHandler>
<MenuList className="z-[1000000] w-64 mb-10 bg-[#1a1f22] text-white">
  {/* <MenuItem onClick={googleSignOut}>Log Out</MenuItem> */}
  {/* <MenuItem className="border-b-1 m-0 flex justify-center items-center hover:bg-[#1a1f22]"> */}
  <div className="border-b px-2 py-3 m-0 flex justify-start ml-3 items-center hover:bg-[#1a1f22]">
   <h1 className="">ChatGPT 3.5</h1><MdExpandCircleDown   className="text-1xl ml-5"/>
   </div>
   {/* </MenuItem> */}
   <div className="hover:bg-blue-gray-800 px-2 py-4 mt-1">
   <h1 className="flex items-center justify-start mt-2 ml-3">GPT4</h1>
  {/* <MenuItem   className=" flex justify-center items-center"> */}
   <Link to={'pricing'}>
  <button className="mt-4 w-[90%] rounded-lg px-8 py-2 bg-[#ff165d] font-semibold text-white tracking-wide">
<h1 className="font-mono text-sm ">Subscribe</h1>
</button> 
</Link>  
</div>           
  {/* </MenuItem> */}
</MenuList> 
</Menu>
  )
) : (
  // If no users, show nothing
  <></>
)}

      <select
        className="form-select appearance-none bg-[#2c302f] border border-gray-400 text-gray-700 py-2 pl-4 pr-8 rounded leading-tight focus:outline-none focus:shadow-outline-blue focus:border-blue-300 absolute top-3 right-3"
        value={selectedValue}
        onChange={handleSelectChange}
      >
       
       <option value="Afrikaans">Afrikaans</option>
<option value="Arabic">Arabic</option>
<option value="Armenian">Armenian</option>
<option value="Azerbaijani">Azerbaijani</option>
<option value="Belarusian">Belarusian</option>
<option value="Bosnian">Bosnian</option>
<option value="Bulgarian">Bulgarian</option>
<option value="Catalan">Catalan</option>
<option value="Chinese">Chinese</option>
<option value="Croatian">Croatian</option>
<option value="Czech">Czech</option>
<option value="Danish">Danish</option>
<option value="Dutch">Dutch</option>
<option value="English">English</option>
<option value="Estonian">Estonian</option>
<option value="Finnish">Finnish</option>
<option value="French">French</option>
<option value="Galician">Galician</option>
<option value="German">German</option>
<option value="Greek">Greek</option>
<option value="Hebrew">Hebrew</option>
<option value="Hindi">Hindi</option>
<option value="Hungarian">Hungarian</option>
<option value="Icelandic">Icelandic</option>
<option value="Indonesian">Indonesian</option>
<option value="Italian">Italian</option>
<option value="Japanese">Japanese</option>
<option value="Kannada">Kannada</option>
<option value="Kazakh">Kazakh</option>
<option value="Korean">Korean</option>
<option value="Latvian">Latvian</option>
<option value="Lithuanian">Lithuanian</option>
<option value="Macedonian">Macedonian</option>
<option value="Malay">Malay</option>
<option value="Marathi">Marathi</option>
<option value="Maori">Maori</option>
<option value="Nepali">Nepali</option>
<option value="Norwegian">Norwegian</option>
<option value="Persian">Persian</option>
<option value="Polish">Polish</option>
<option value="Portuguese">Portuguese</option>
<option value="Romanian">Romanian</option>
<option value="Russian">Russian</option>
<option value="Serbian">Serbian</option>
<option value="Slovak">Slovak</option>
<option value="Slovenian">Slovenian</option>
<option value="Spanish">Spanish</option>
<option value="Swahili">Swahili</option>
<option value="Swedish">Swedish</option>
<option value="Tagalog">Tagalog</option>
<option value="Tamil">Tamil</option>
<option value="Thai">Thai</option>
<option value="Turkish">Turkish</option>
<option value="Ukrainian">Ukrainian</option>
<option value="Urdu">Urdu</option>
<option value="Vietnamese">Vietnamese</option>
<option value="Welsh">Welsh</option>

      </select>
      <div className="pointer-events-none absolute  inset-y-0 right-0 flex items-center px-2 text-gray-700">
        {/* Dropdown arrow */}
        
      </div>

      {/* Display the selected value */}
      {/* {selectedValue && (
        <p className="mt-2 text-sm text-gray-600">Selected Value: {selectedValue}</p>
      )} */}
    </div>
        </div>
        {chat.length > 0 ? (
          <div
            // className="h-[78%] overflow-scroll hide-scroll-bar pt-10 pb-10"
            className="h-[70%] overflow-scroll hide-scroll-bar  pb-10"
            ref={chatContainerRef}
          >
            {chat.map((item, index) => (
              <div
                key={index}
                className={`w-[60%] mx-auto p-4 flex ${
                  item.role === "user" ? "bg-[#444343]" : ""
                }`}
              >
                <span
                  style={{
                    display: "inline-block",
                    width: "50px",
                    padding: "1px",
                    height: "50px",
                  }}
                  className=" flex items-start justify-start"
                >
                  {item.role === "user" ? (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="icon icon-tabler icon-tabler-user-bolt"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      stroke-width="2"
                      stroke="currentColor"
                      fill="none"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                      <path d="M8 7a4 4 0 1 0 8 0a4 4 0 0 0 -8 0"></path>
                      <path d="M6 21v-2a4 4 0 0 1 4 -4h4c.267 0 .529 .026 .781 .076"></path>
                      <path d="M19 16l-2 3h4l-2 3"></path>
                    </svg>
                  ) : (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="icon icon-tabler icon-tabler-robot"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      stroke-width="2"
                      stroke="currentColor"
                      fill="none"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                      <path d="M7 7h10a2 2 0 0 1 2 2v1l1 1v3l-1 1v3a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2v-3l-1 -1v-3l1 -1v-1a2 2 0 0 1 2 -2z"></path>
                      <path d="M10 16h4"></path>
                      <circle
                        cx="8.5"
                        cy="11.5"
                        r=".5"
                        fill="currentColor"
                      ></circle>
                      <circle
                        cx="15.5"
                        cy="11.5"
                        r=".5"
                        fill="currentColor"
                      ></circle>
                      <path d="M9 7l-1 -4"></path>
                      <path d="M15 7l1 -4"></path>
                    </svg>
                  )}
                </span>
                <div>
                  <h1>{item.role === "" ? inputValue : ""}</h1>
                  <p className="leading-loose" style={{ whiteSpace: "break-spaces" }}>
  {item.content.includes("\\n")
    ? item.content.split("\\n").map((line, index) => (
        <React.Fragment key={index}>
          {line}
          <br />
        </React.Fragment>
      ))
    : item.content.replace(/\\([\\n])/g, "$1").replace(/\\/g, "")}
</p>





                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="h-[70%]  flex flex-col justify-center items-center">
            <div className="mb-5">
              <h1 className="mt-5 text-4xl font-bold">
                <img src="" alt="" />
              </h1>
            </div>
            <div className="lg:flex lg:flex-wrap ml-10 mr-10">
              {examples.map((item, index) => (
                <div key={index} className="w-full lg:w-1/2 p-3">
                  <p className=" lg:p-3  sm:p-2 mt-2 cursor-pointer">{item}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        <div className="h-[20%]  flex justify-center w-full items-center">
          <div className="relative flex items-center justify-center w-[70%] shadow-4xl">
            <input
              type="text"
              className={`w-full p-4 rounded-md pr-16 bg-[#2d3135] ${
                isButtonDisabled ? "opacity-50 cursor-not-allowed" : ""
              }`}
              placeholder="Enter your text"
              onChange={handleChange}
              value={inputValue}
              onKeyPress={handleKeyPress}
              disabled={isButtonDisabled}
            />
            {!isButtonDisabled && (
              <LuSendHorizonal
                className="text-3xl text-white absolute cursor-pointer right-4 top-[1.5] bg-slate-600"
                onClick={handlesend}
              />
            )}
          </div>

          {/* <button>Click Me</button> */}
        </div>
      </div>
    </div>